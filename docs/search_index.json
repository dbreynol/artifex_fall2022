[["index.html", "Artifex - Fall 2022 Course Overview - Artifex Fall 2022 Prerequisites and Preparations References", " Artifex - Fall 2022 David Reynolds 2022-08-28 Course Overview - Artifex Fall 2022 Welcome to Artifex! The primary objective of this course/ club is to equip its members with the essential skills of a data scientist by working through a real world business analytics project with an industry partner. The course delivery is a mix of lectures and project-based learning. The lectures will all be tailored to our project and will be more prevalent in the beginning of the course. All lecture materials will be posted on this website. Further details on the partner project will be posted on Canvas. Prerequisites and Preparations You should have some basic knowledge of R, and be familiar with the topics covered in the Chapters 1 and 2 here. Have a recent version of R and RStudio installed. Install and load the tidyverse package. References Grolemund, G &amp; Wickham, H (2017): R for Data Science http://r4ds.had.co.nz Hyndman, R &amp; Athanasopoulos, G (2022): Forecasting: Principles and Practice https://otexts.com/fpp2/index.html "],["data-processing.html", "Chapter 1 Data Processing 1.1 Cleaning up strings 1.2 Assignment 1 1.3 Dealing with dates", " Chapter 1 Data Processing To motivate this section on data processing, we will use the (fictional) data below that contains order information for a retail company. As is almost always the case, this data needs some pre-processing before it is in shape for exploration and analysis. Copy and paste the code below to obtain this data frame in your environment. The processing steps we carry out below rely on the lubridate package, so start your script with library(lubridate). set.seed(1) customer = c(&quot;113 - Shaws&quot;, &quot;217 - Shaws&quot;, &quot;2114 - WalMart&quot;, &quot;99 - WalMart&quot;, &quot;23 - CVS&quot;, &quot;09 - CVS&quot;) # numbers dash name product = c(&quot;WX1X - 9 gal - Jelly&quot;, &quot;WX1P - 4 gal - Jelly&quot;, &quot;QP1X - 11 gal - Grape Juice&quot;, &quot;QP1 - 7 gal - Fruit Juice&quot;, &quot;TYL - 1 gal - Peanut Butter&quot;, &quot;LL - 2 gal - Jam&quot;) # letters size description business_unit = c(&quot;123 Retail&quot;, &quot;437 Consumer&quot;, &quot;990 International&quot;, &quot;222 Retail&quot;, &quot;49 Consumer&quot;, &quot;09 International&quot;) # number dash name df = data.frame(customer, product, business_unit, &quot;1-1-2022&quot; = rpois(6, 1100), &quot;2-1-2022&quot; = rpois(6, 1200), check.names = F) Table 1.1: A fake dataset on product shipments. customer product business_unit 1-1-2022 2-1-2022 113 - Shaws WX1X - 9 gal - Jelly 123 Retail 1079 1225 217 - Shaws WX1P - 4 gal - Jelly 437 Consumer 1144 1219 2114 - WalMart QP1X - 11 gal - Grape Juice 990 International 1142 1189 99 - WalMart QP1 - 7 gal - Fruit Juice 222 Retail 1113 1172 23 - CVS TYL - 1 gal - Peanut Butter 49 Consumer 1048 1178 09 - CVS LL - 2 gal - Jam 09 International 1116 1189 Our pre-processing of this particular dataset consists primarily of cleaning up the character (string) variables and dealing with dates. 1.1 Cleaning up strings For a reference on the use of strings in R, see this excellent resource. For the purpose of our analysis, some aspects of this dataset that are distracting for analysis include: The meaningless (to us) numbers that precede the customer name and business unit. The meaningless letters that precede the product description. The product variable includes the size which would ideally exist in its own column (i.e., we want a size column whose first entry is 9) Let’s work through each of these using the functions str_sub, str_locate, and str_split. Let’s first go over what these functions do and how they can be used for this task. str_sub(&quot;The big short&quot;, start = 5, end = 7) # big # the input can also be a vector x &lt;- c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;) # character vector str_sub(x, 1, 3) # &quot;App&quot; &quot;Ban&quot; &quot;Pea&quot; str_locate(&quot;This&quot;, &quot;s&quot;) # gives the starting and ending position of the &#39;s&#39; in &#39;This&#39; How can these two functions (str_sub, str_locate) be used in conjunction to deal with the first issue identified above? Try this out using the first entry from customer. The patterns that are located can be much more general than a literal letter. These patters are known as regular expressions. For example, suppose we would like to locate the part of the string that consists of the letter a followed by any number. The regular expression that represents any digit is \\d. str_locate(&quot;aardvark a3&quot;, &quot;a\\\\d&quot;) # 10 11 For more on matching regular expressions in R, see this document on the topic. Next, let’s deal with the product variable. This variable contains two potentially useful pieces of information and one useless piece. They are separated by a dash. This presents a good use case for the str_split function. Here is an example where we have two data points that are separated by a colon and we would like to extract them. str_split(&quot;200:300&quot;, &quot;:&quot;, simplify = T) # 200 300 What should we split the product variable on? This will give us a matrix, with two useful columns. We want to grab these columns and include them in our data frame as size and product_name. Refresher on how to carry out these sorts of tasks - How R thinks about data. 1.2 Assignment 1 Use the functions described above (str_sub, str_locate, and str_split) to obtain the following cleaned up data frame. customer product business_unit 1-1-2022 2-1-2022 size Shaws Jelly Retail 1079 1225 9 gal Shaws Jelly Consumer 1144 1219 4 gal WalMart Grape Juice International 1142 1189 11 gal WalMart Fruit Juice Retail 1113 1172 7 gal CVS Peanut Butter Consumer 1048 1178 1 gal CVS Jam International 1116 1189 2 gal 1.3 Dealing with dates The output from assigment one gets us pretty close to our desired analytic dataset. However, it turns out that for our analysis we would like the data to be in long format, where each row contains information on a single month. So, the first row of the dataset would have the January 2022 units of 9 gal Jelly shipped to Shaw’s. This is achieved using the function pivot_longer. Let’s take a look at the example from the documentation to figure out what parameters to use to achieve this. Once you figure out the appropriate arguments for pivot_longer, the head of your new data frame should look like this: customer product business_unit size month units Shaws Jelly Retail 9 gal 1-1-2022 1079 Shaws Jelly Retail 9 gal 2-1-2022 1225 Shaws Jelly Consumer 4 gal 1-1-2022 1144 Shaws Jelly Consumer 4 gal 2-1-2022 1219 WalMart Grape Juice International 11 gal 1-1-2022 1142 WalMart Grape Juice International 11 gal 2-1-2022 1189 "],["exploratory-data-analysis.html", "Chapter 2 Exploratory Data Analysis", " Chapter 2 Exploratory Data Analysis "],["forecasting-models.html", "Chapter 3 Forecasting Models", " Chapter 3 Forecasting Models "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
